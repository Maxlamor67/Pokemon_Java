@startuml

package jouer{
class Pokemon {
+ main(String[] args: String[])
}

class Jeu {
- m_scanner : Scanner
- m_numeroTour : int
- m_nomsPokemon : String[*]
- m_clip : Clip
+ «create» Jeu (m_joueur1 : Dresseur, m_joueur2 : Dresseur)
+ jouerTour()
+ utilisationDesPouvoirs ()
+ trouverCarteDansTerrain (nomCarte : String)
+ trouverCarteDansTerrainJoueurAdverse(nomCarte : String, m_joueurActuel : Dresseur) : CartePokemon
+ afficherCartesTerrainJoueur2() : String
+ trouverCarteDansTerrainJoueur2(nomCarte : String) : CartePokemon
+ prochainTour()
+ afficherMainJoueur2() : String
+ afficherCarteMainJoueur2() : String
+ trouverCarteDansMainJoueur2(nomCarte : String) : CartePokemon
+ genererPokemon() : CartePokemon
+ getJoueurAdverse(m_joueurActuel : Dresseur) : Dresseur
}
}

package joueur{

class Dresseur {
# m_nom : String
- m_vieRestante : int
+ «create» Dresseur(m_nom : String)
+ getTerrain() : String[*]
+ piocher()
+ afficherPioche()
+ afficherDefausse()
+ afficherMain()
+ getNom() : String
+ getMain() : String[*]
+ getPioche() : String[*]
+ jouerCarte(carte : CartePokemon)
+ ajouterCarteAPioche(carte : CartePokemon)
+ ajouterCarte(carte : CartePokemon)
+ placerPokemonSurTerrain(carte : CartePokemon) : boolean
+ defausserPokemon(pokemon : CartePokemon)
+ afficherCartesTerrainAvecIndex() : String
+ getVieRestante() : Integer
+ setVieRestante(m_vieRestante : Integer)

}

class CartePokemon {
- m_nom : String
- m_vie : int
- m_vieMax : int
- m_attaque : int
+ CartePokemon(m_nom : String, m_affinite : Type, m_pouvoir:Pouvoir, m_vie : int, m_vieMax : int, m_attaque : int)
+ getNom() : String
+ getVie() : int
+ getVieMax() : int
+ getAttaque() : int
+ getAffinite() : Type
+ attaquer(pokemonCible : CartePokemon)
+ afficherCarte()
}

class JoueurOrdinateur {
+ JoueurOrdinateur(m_nom : String)
+ jouerTour(jeu : Jeu)
- utilisationDesPouvoirs(jeu : Jeu)
- placerPokemonsSurTerrain()
- attaquerAdversaire(jeu : Jeu)
- choisirCible(terrainAdversaire : String[*]) : CartePokemon
}
}

package element{

abstract class Type <<abstract>> {
#-m_type : String
+ «create» Type ()
+ {abstract} getType() : Type
+ {abstract} getAvantage() : Type
+ {abstract} toString(): String
+equals(Other other):Boolean
}

class Air {
+ «create» Air()
+ getAvantage() : Type
+ getType(): Type
+ toString(): String

}

class Eau {
+ «create» Eau()
+ getAvantage() : Type
+ getType(): Type
+ toString(): String

}

class Feu {
+ «create» Feu()
+ getAvantage() : Type
+ getType(): Type
+ toString(): String

}

class Terre {
+ «create» Terre()
+ getAvantage() : Type
+ getType(): Type
+ toString(): String

}

class Ether {
+ «create» Ether() :
+ getAvantages() : String[*]
+ getType(): Type
+ toString(): String

}

class Plomb {
+ «create» Plomb() :
+ getAvantages() : String[*]
+ getType(): Type
+ toString(): String
}
}

package pouvoir{

abstract class Pouvoir <<abstract>> {
+ «create» Pouvoir ()
+ utiliserPouvoir(carte : CartePokemon)
+ utiliserPouvoir(carte : CartePokemon, other CartePokemon)
+ {abstract} nbrUtilisation():Integer
+ {abstract} getTypePouvoir() : TypePouvoir
+ {abstract} getDescription() : String
+ {abstract} toString() : String

}


enum TypePouvoir <<enumerate>> {
ALLIE
TOUTCAMP
ENNEMI
TOUS
}

class SoinTotal {
- m_utilisation: Integer
+ «create» SoinTotal()
+ soignerTotalement(carte : CartePokemon)
+ nbrUtilisation() : Integer
+ setUtilisation(utilisation : Integer)
+ getTypePouvoir() : TypePouvoir
+ getDescription() : String
+ toString(): String
}

class SoinSimple {
- m_soin : Integer
- m_utilisation: Integer
+ «create» SoinSimple()
+ utiliserPouvoir(carte : CartePokemon)
+ utiliserPouvoir(carte : CartePokemon, other : CartePokemon)
+ getSoin() : Integer
+ nbrUtilisation() : Integer
+ setUtilisation(utilisation : Integer)
+ getTypePouvoir(): TypePouvoir
+ getDescription() : String
+ toString(): String
}

class Kamikaze {
- m_utilisation: Integer
+ «create» Kamikaze()
+ utiliserPouvoir(carte : CartePokemon)
+ utiliserPouvoir(carte : CartePokemon, other : CartePokemon)
+ nbrUtilisation() : Integer
+ setUtilisation(utilisation : Integer)
+ getTypePouvoir() : TypePouvoir
+ getDescription() : String
+ toString(): String
}

class Resistance {
- m_resistance;
- m_utilisation: Integer
+ «create» Resistance()
+ utiliserPouvoir(carte : CartePokemon)
+ utiliserPouvoir(carte : CartePokemon, other : CartePokemon)
+ getResistance() : Integer
+ nbrUtilisation() : Integer
+ setUtilisation(utilisation : Integer)
+ getTypePouvoir() : TypePouvoir
+ getDescription() : String
+ toString(): String
}

class AffiniteEther {
- m_utilisation: Integer
+ «create» AffiniteEther()
+ utiliserPouvoir(carte : CartePokemon)
+ utiliserPouvoir(carte : CartePokemon, other : CartePokemon)
+ nbrUtilisation() : Integer
+ setUtilisation(utilisation : Integer)
+ getTypePouvoir() : TypePouvoir
+ getDescription() : String
+ toString(): String
}

class AffinitePlomb {
- m_utilisation: Integer
+ «create» AffinitePlomb()
+ utiliserPouvoir(carte : CartePokemon)
+ utiliserPouvoir(carte : CartePokemon, other : CartePokemon)
+ nbrUtilisation() : Integer
+ setUtilisation(utilisation : Integer)
+ getTypePouvoir() : TypePouvoir
+ getDescription() : String
+ toString(): String
}

class FerveurGuerriere {
- m_utilisation: Integer
+ «create» FerveurGuerriere()
+ utiliserPouvoir(carte : CartePokemon)
+ nbrUtilisation() : Integer
+ getTypePouvoir() : TypePouvoir
+ getDescription() : String
+ toString(): String
}

class Peur {
- m_utilisation: Integer
+ «create» Peur()
+ utiliserPouvoir(carte : CartePokemon)
+ nbrUtilisation() : Integer
+ getTypePouvoir() : TypePouvoir
+ getDescription() : String
+ toString(): String
}
}
Air --|> Type
Terre --|> Type
Eau --|> Type
Feu --|> Type
Ether --|> Type
Plomb --|> Type
Pouvoir .--> TypePouvoir : utilise
SoinSimple --|> Pouvoir
SoinTotal --|> Pouvoir
Kamikaze --|> Pouvoir
Resistance --|> Pouvoir
FerveurGuerriere --|> Pouvoir
AffiniteEther --|> Pouvoir
AffinitePlomb --|> Pouvoir
Peur --|> Pouvoir
SoinSimple "1"*--->"\n 1 \n m_type" TypePouvoir
SoinTotal "1"*--->"\n 1 \n m_type" TypePouvoir
Kamikaze "1"*--->"\n 1 \n m_type" TypePouvoir
Resistance "1"*--->"\n 1 \n m_type" TypePouvoir
FerveurGuerriere "1"*--->"\n 1 \n m_type" TypePouvoir
AffiniteEther "1"*--->"\n 1 \n m_type" TypePouvoir
AffinitePlomb "1"*--->"\n 1 \n m_type" TypePouvoir
Peur "1"*--->"\n 1 \n m_type" TypePouvoir
CartePokemon "1" *---> "1 m_pouvoir" Pouvoir
CartePokemon "1" *---> "\n 1 \n m_affinite" Type : affinite
Dresseur "1" *---> "0..* \n m_pioche :List<CartePokemon>\n m_defausse :List<CartePokemon>\n m_terrain :List<CartePokemon>\n m_main :List<CartePokemon>" CartePokemon : possède
Pokemon .--> JoueurOrdinateur : utilise
Pokemon .--> Dresseur : utilise
Pokemon .--> Jeu : utilise
Pokemon .--> CartePokemon : utilise
JoueurOrdinateur .--> Jeu : utilise
JoueurOrdinateur .--> CartePokemon : utilise
JoueurOrdinateur --> Dresseur
Jeu "1\n" *----> " 0..* \n List<Pouvoir>" Pouvoir
Jeu .--> CartePokemon : utilise
Jeu "1" *---> "1 \n m_joueur1 \n m_joueur2\n m_joueurActuel" Dresseur
Jeu "1" *---> "1 \n m_joueurAdverse " JoueurOrdinateur
@enduml

